{"version":3,"file":"static/js/515.891d679f.chunk.js","mappings":"2NAwCA,IA/ByB,SAACA,GACzB,OAAO,SAACC,GACP,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAQJ,EAAAA,EAAAA,IAAYK,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MASjB,OANAC,EAAAA,WAAgB,WACXJ,IAAUF,GACbI,GAASG,EAAAA,EAAAA,IAAyBV,GAEpC,IAEIK,IAAUF,GACN,SAAC,IAAe,KAIpBQ,EAAAA,EAAAA,QAAyBN,GAC5BE,GAASK,EAAAA,EAAAA,QACF,SAAC,KAAQ,CAACC,GAAI,YAIlBb,GACI,SAACF,GAAS,UAAKC,KAChB,SAAC,KAAQ,CAACc,GAAI,UACtB,CACD,C,qICrCA,EAAyC,4CAAzC,EAAiG,+BAAjG,EAAuI,0BAAvI,EAA0K,4BAA1K,EAAsN,mCAAtN,EAA4Q,sCAA5Q,EAA6T,8BAA7T,EAAiW,yBAAjW,EAAiY,0BAAjY,EAAqa,6BAAra,EAA0c,2BAA1c,EAA4e,0BAA5e,EAA+gB,4B,qKCIxgBC,EAAQC,EAAAA,EAAAA,KAyCf,EAtCwB,SAAH,GAAwF,IAAnFC,EAAU,EAAVA,WAAaC,EAAa,EAAbA,cAAeC,EAAyB,EAAzBA,0BAA2BC,EAAqB,EAArBA,sBAgBhF,OACC,SAAC,IAAK,CACLC,MAAM,sEACNC,KAAMF,EACNG,UAAU,EACVC,UAAQ,EACRC,SAAUN,EACVO,OAAQ,EACP,SAAC,IAAM,CAACC,KAAK,UAAUC,QAAST,EAA0B,SAAgB,MAAX,aAC9D,UAEF,4BACC,SAACJ,EAAI,UAAC,2fAAsG,mBAC5G,SAACA,EAAI,UAAC,UACN,SAAC,IAAO,CAACM,MAAM,+DAAY,UAC1B,UAACN,EAAI,CAACc,MAAI,EAACD,QApBK,WACnBE,UAAUC,UAAUC,UAAUC,OAAOf,IACnCgB,MAAK,WATPjB,EAAWK,KAAK,CACfK,KAAM,UACNQ,QAAS,qEACTC,SAAU,GAMW,GACvB,EAiBqCC,UAAWC,EAAY,UAAEpB,EAAc,QAAM,SAACqB,EAAA,EAAY,aAKhG,E,oBCzCOxB,EAAQC,EAAAA,EAAAA,KAyEf,EAtE2B,SAAH,GAAoK,IAA/JC,EAAU,EAAVA,WAAYuB,EAAsB,EAAtBA,uBAAwBC,EAAoB,EAApBA,qBAAsBC,EAAe,EAAfA,gBAAiBC,EAAgB,EAAhBA,iBAAkBC,EAA2B,EAA3BA,4BAA6BC,EAA8B,EAA9BA,+BAEtJ,EAA4BC,EAAAA,EAAAA,UAArBC,GAAmC,YAAlB,IAExBC,EAAAA,EAAAA,YAAU,WACLN,IACHE,GAA4B,GAC5B3B,EAAWK,KAAK,CACfK,KAAM,UACNQ,QAAS,iJACTC,SAAU,IAGb,GAAG,CAACM,IAGJ,IAAMO,EAAsC,WAC3CF,EAAkBG,cAClBN,GAA4B,EAC7B,EAQA,OACC,SAAC,IAAK,CACLvB,MAAM,uHACNC,KAAMkB,EACNhB,UAAQ,EACRC,SAAUwB,EACVvB,OAAQ,EACP,SAAC,IAAM,CACNC,KAAK,UACLC,QAASqB,EAAoC,SAChC,wCAAT,WAEL,SAAC,IAAM,CACNtB,KAAK,UACLC,QAAS,kBAAMmB,EAAkBI,QAAQ,EACzCC,QAASX,EAAqB,SACrB,MAAL,OAEJ,UAEF,4BACC,SAAC,EAAI,UAAC,kQAAsD,mBAC5D,SAAC,IAAI,CACJY,SA3BiC,WACpCR,EAA+BE,EAAkBO,cAAc,UAChE,EA0BIC,KAAMR,EACNS,cAAc,EAAM,UACpB,SAAC,SAAS,CACTC,MAAM,KACNC,KAAK,SACLC,eAAgBhB,EAAmB,QAAU,UAC7CiB,KAAMjB,EACNkB,MAAO,CAAC,CACPC,UAAU,EACVC,QAAS,uJACP,UACH,SAAC,IAAW,CAACC,KAAK,QAAQC,IAAK,YAMrC,E,oBCpDMC,EAAW,SAAH,GAAgB,IAKzBC,EACAC,EANcC,EAAI,EAAJA,KAEZC,GAAWC,EAAAA,EAAAA,MAEbC,EAAaH,EAAKI,OAItB,OAAQD,GACP,KAAKE,EAAAA,GACJF,EAAa,oGACbL,GAAO,SAACQ,EAAA,EAAmB,IAC3BP,EAAa9B,EACb,MACD,KAAKsC,EAAAA,GACJJ,EAAa,wCACbL,GAAO,SAACU,EAAA,EAAmB,IAC3BT,EAAa9B,EACb,MACD,KAAKwC,EAAAA,GACJN,EAAa,4EACbL,GAAO,SAACQ,EAAA,EAAmB,IAC3BP,EAAa9B,EACb,MACD,KAAKyC,EAAAA,GACJP,EAAa,gEACbL,GAAO,SAACa,EAAA,EAAc,IACtBZ,EAAa9B,EACb,MACD,KAAK2C,EAAAA,GACJT,EAAa,sEACbL,GAAO,SAACe,EAAA,EAAW,IACnBd,EAAa9B,EACb,MACD,QACCkC,EAAa,mFACbL,GAAO,SAACe,EAAA,EAAW,IACnBd,EAAa9B,EASf,OACC,UAAC,IAAI,CAACD,UAAWC,EAAkB,IAAM8B,EAAYxC,QAN9B,WACnByC,EAAKI,SAAWC,EAAAA,IACnBJ,EAAS,SAAWD,EAAKc,GAC3B,EAG+E,UAC5EhB,EAAK,WAELE,EAAKe,aACL,UAAC,IAAO,CAAC/D,MAAO,OAASgD,EAAKe,WAAW,WACxC,iBAAM/C,UAAWC,EAAY,SAAE+B,EAAKgB,gBAAqB,WAG3D,0BAAOb,IAAkB,QACzB,kBAAMnC,UAAWC,EAAc,UAAC,QAAM+B,EAAKc,GAAG,SAGjD,EA6CA,EA3CmB,SAAH,GAAkK,IAA7JG,EAAK,EAALA,MAAOC,EAAkB,EAAlBA,mBAAoBC,EAAmB,EAAnBA,oBAAqBC,EAA0B,EAA1BA,2BAA4B7C,EAA2B,EAA3BA,4BAA6B8C,EAAoB,EAApBA,qBAAsBC,EAAuB,EAAvBA,wBAEnJ,EAAoC5B,EAAAA,GAAAA,aAAoB,eAAjD9C,EAAU,KAAE2E,EAAa,KAE5BC,EAAW,GASf,OARKN,GAAsBD,IAC1BO,EAAWP,EAAMQ,KAAI,SAAAzB,GAAI,OAAI,SAACH,EAAQ,CAAeG,KAAMA,GAAfA,EAAKc,GAAiB,KAE/DY,MAAMC,QAAQV,IACI,IAAjBA,EAAMW,SACTJ,GAAW,eAAGxD,UAAWC,EAAc,UAAC,6KAAkC,kBAAK,2jBAIhF,2BACEsD,GACD,iBAAKvD,UAAWC,EAAwB,WACvC,SAAC4D,EAAA,EAAK,CAACC,MAAO,EAAE,SAAC,+EACjB,4BACC,SAAC,IAAM,CACN/C,QAASoC,EACT7D,KAAK,OACLwC,MAAM,SAACiC,EAAA,EAAkB,IACzBxE,QAAS6D,EAA2B,SAAC,gDAEtC,SAAC,IAAM,CACN9D,KAAK,OACLwC,MAAM,SAACkC,EAAA,EAAoB,IAC3BzE,QAAS,kBAAMgB,GAA4B,EAAK,EAAC,SAAC,+FAKpD2C,GACG,gBAAKlD,UAAWC,EAAc,UAAC,SAACgE,EAAA,EAAe,CAACvC,QAAQ,oGAAoBC,KAAK,cACjF,gBAAK3B,UAAWC,EAAqB,SAAEuD,KAE3C,SAAC,GAAe,QAAC5E,WAAYA,GAAgByE,KAC7C,SAAC,GAAkB,QAACzE,WAAYA,GAAgB0E,MAGnD,ECpHMY,EAAyB,SAAH,GAAiB,IAAZnG,EAAK,EAALA,MAChC,OACC,iBAAKiC,UAAWC,EAA8B,WAC7C,SAAC,IAAM,CACN0B,KAAM,IACNG,MAAM,SAACqC,EAAA,EAAY,OAEpB,gBAAKnE,UAAWC,EAAiB,UAChC,SAAC4D,EAAA,EAAK,CAACC,MAAO,EAAE,SAAE/F,QAItB,EAWA,EAToB,SAAH,GAAkC,IAA7BA,EAAK,EAALA,MAAOqG,EAAe,EAAfA,gBAC5B,OACC,UAACC,EAAA,EAAoB,YACpB,SAACH,EAAsB,CAACnG,MAAOA,KAC/B,SAAC,GAAU,UAAKqG,MAGnB,E,wCC4EA,IAAeE,EAAAA,EAAAA,IAlFc,WAE5B,IAAMvG,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBJ,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBmF,GAAQpF,EAAAA,EAAAA,IAAY0G,EAAAA,IAClBrB,GAAqBrF,EAAAA,EAAAA,IAAY2G,EAAAA,IACjCrB,GAAsBtF,EAAAA,EAAAA,IAAY4G,EAAAA,IAClC5F,GAAgBhB,EAAAA,EAAAA,IAAY6G,EAAAA,IAC5B3F,GAAwBlB,EAAAA,EAAAA,IAAY8G,EAAAA,IACpCxE,GAAyBtC,EAAAA,EAAAA,IAAY+G,EAAAA,IACrCxE,GAAuBvC,EAAAA,EAAAA,IAAYgH,EAAAA,IACnCxE,GAAkBxC,EAAAA,EAAAA,IAAYiH,EAAAA,IAC9BxE,GAAmBzC,EAAAA,EAAAA,IAAYkH,EAAAA,IAC/B5G,GAAWC,EAAAA,EAAAA,OAEjBuC,EAAAA,EAAAA,YAAU,WACJuC,GACJ/E,GAAS6G,EAAAA,EAAAA,MAEX,GAAG,KAEHrE,EAAAA,EAAAA,YAAU,WACK,OAAVsC,GAAmBC,GACtB/E,GAAS6G,EAAAA,EAAAA,MAEX,IAEI/B,IACHA,EAAQA,EAAMQ,KAAI,SAAAzB,GAAI,OAAIiD,EAAAA,GAAAA,GAAoBjD,EAAMpE,EAAO,KAI5D,IAWM2C,EAA8B,SAACtB,GACpCd,GAAS+G,EAAAA,EAAAA,IAA0BjG,IAC9BA,GACJd,GAAS6G,EAAAA,EAAAA,MAEX,EAQMZ,EAAkB,CACvBnB,MAAAA,EACAC,mBAAAA,EACAC,oBAAAA,EACAC,2BA5BkC,WAClCjF,GAASgH,EAAAA,EAAAA,MACV,EA2BC5E,4BAAAA,EACA8C,qBAAsB,CACrBxE,cAAAA,EACAC,0BA3BgC,WACjCX,GAASiH,EAAAA,EAAAA,KAAyB,IAClCjH,GAAS6G,EAAAA,EAAAA,MACV,EAyBEjG,sBAAAA,GAEDuE,wBAAyB,CACxBnD,uBAAAA,EACAC,qBAAAA,EACAC,gBAAAA,EACAC,iBAAAA,EACAC,4BAAAA,EACAC,+BAtBqC,SAAC6E,GACvClH,GAASmH,EAAAA,EAAAA,IAAsB,CAACD,OAAAA,EAAQzH,OAAAA,IACzC,IAwBA,OACC,SAAC,EAAW,CAACG,MAAOA,EAAOqG,gBAAiBA,GAE9C,G,qHCtGA,EAA0B,sCAA1B,EAA0E,sCAA1E,EAA0H,sC,8ECsF1H,EA3E6B,SAAH,GAAoB,IAAfmB,EAAQ,EAARA,SACxBtD,GAAWC,EAAAA,EAAAA,MACXsD,GAAWC,EAAAA,EAAAA,MAAcC,SAEzB9H,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBmF,GAAQpF,EAAAA,EAAAA,IAAY0G,EAAAA,IAClBrB,GAAqBrF,EAAAA,EAAAA,IAAY2G,EAAAA,IACjCmB,GAAmB9H,EAAAA,EAAAA,IAAY+H,EAAAA,IAC/BzH,GAAWC,EAAAA,EAAAA,MASjB,IAPAuC,EAAAA,EAAAA,YAAU,WACK,OAAVsC,GAAmBC,GACtB/E,GAAS6G,EAAAA,EAAAA,MAEX,IAGI/B,EAAO,CACV,IAAI4C,EAAU,EAOd5C,GADAA,GALAA,EAAQA,EAAM6C,QAAO,SAAA9D,GACpB,OAAKA,EAAKI,SAAW2D,EAAAA,IAA4BF,KAAa,GACtD7D,CAET,KACcyB,KAAI,SAAAzB,GAAI,OAAIiD,EAAAA,EAAAA,GAAoBjD,EAAMpE,EAAO,KAC7C6F,KAAI,SAAAzB,GAAI,MAAK,CAC1BZ,MAAOY,EAAKgB,cACZlB,KAAOE,EAAKI,SAAWK,EAAAA,IAA4B,SAACH,EAAA,EAAmB,KAAK,SAAC0D,EAAA,EAAkB,IAC/FC,IAAK,SAAWjE,EAAKc,GACrB,GACF,CAIA,IAAMoD,EAAY,CACjB,CAAC9E,MAAO,6CAAWU,MAAM,SAACqC,EAAA,EAAY,IAAI8B,IAAK,YAC/C,CACC7E,MAAO,kFACPU,MAAM,SAACqE,EAAA,EAAgB,IACvBF,IAAK,QACLV,SAAoB,OAAVtC,GAAkBA,EAAMW,OAAS,EACxCX,EACA,CAAC,CAAC7B,MAAO,yFAAoB6E,IAAK,WAAY3G,KAAM,YAczD,OACC,iBAAKU,UAAWC,EAAe,WAC9B,gBAAKD,UAAWC,EAAe,UAC9B,SAAC,IAAI,CACJmG,KAAK,SACLC,oBAAqB,CAACb,GACtBc,gBAAiBX,EACjBY,MAAOL,EACPM,SAjBiB,SAAC7I,GACrBsE,EAAStE,EAAMsI,IAChB,EAgBIQ,aAbqB,SAAC9I,GACzBQ,GAASuI,EAAAA,EAAAA,IAAoB/I,GAC9B,OAcE,oBAASqC,UAAWC,EAAe,SACjCsF,MAIL,C","sources":["Components/HOC/withAuthRedirect.jsx","webpack://checkers-online-frontend/./src/Components/ProfilePage/ProfilePage.module.css?9e02","Components/ProfilePage/GamesBlock/ModalCreateGame.jsx","Components/ProfilePage/GamesBlock/ModalConnectToGame.jsx","Components/ProfilePage/GamesBlock/GamesBlock.jsx","Components/ProfilePage/ProfilePage.jsx","Components/ProfilePage/ProfilePageContainer.jsx","webpack://checkers-online-frontend/./src/Components/TemplatePageWithMenu/TemplatePageWithMenu.module.css?1b26","Components/TemplatePageWithMenu/TemplatePageWithMenu.jsx"],"sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectLogin, selectToken, selectUserId, setLogoutData, tryGetLoginUserDataAsync} from \"../../Redux/AuthReducer\";\r\nimport LoaderFullSpace from \"../Common/LoaderFullSpace/LoaderFullSpace\";\r\nimport {getTokenFromCookie} from \"../../Cookie/AuthWithCookie\";\r\n\r\n// пропускает на нужную страницу только если пользователь авторизован\r\n// иначе редиректит на страницу авторизации\r\nconst withAuthRedirect = (Component) => {\r\n\treturn (props) => {\r\n\t\tconst userId = useSelector(selectUserId);\r\n\t\tconst login = useSelector(selectLogin);\r\n\t\tconst token = useSelector(selectToken);\r\n\t\tconst dispatch = useDispatch();\r\n\r\n\t\t// если токен есть (получен из куки), а идентификатора пользователя нет, значит надо подгрузить информацию о пользователе\r\n\t\tReact.useEffect(() => {\r\n\t\t\tif (token && !login) {\r\n\t\t\t\tdispatch(tryGetLoginUserDataAsync(userId));\r\n\t\t\t}\r\n\t\t});\r\n\t\t// при этом отображается загрузка\r\n\t\tif (token && !login) {\r\n\t\t\treturn <LoaderFullSpace/>\r\n\t\t}\r\n\r\n\t\t// проверка, что токен не был отозван\r\n\t\tif (getTokenFromCookie() !== token) {\r\n\t\t\tdispatch(setLogoutData()); // если отозван, то на всякий случай диспатчим logout\r\n\t\t\treturn <Navigate to={\"/login\"}/> // редирект на страницу авторизации\r\n\t\t}\r\n\r\n\t\t// если авторизация пройдена, то рендерится нужный компонент, иначе редирект на страницу авторизации\r\n\t\tif (userId)\r\n\t\t\treturn <Component {...props}/>\r\n\t\treturn <Navigate to={\"/login\"}/>\r\n\t}\r\n}\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nexport default {\"userPhotoAndLoginBlock\":\"ProfilePage_userPhotoAndLoginBlock__1JfNh\",\"nameBlock\":\"ProfilePage_nameBlock__pHmDX\",\"copy\":\"ProfilePage_copy__PNjWm\",\"loader\":\"ProfilePage_loader__ZSVJl\",\"gameCardBlock\":\"ProfilePage_gameCardBlock__jzv5s\",\"gamesBlockHeader\":\"ProfilePage_gamesBlockHeader__Z2CI4\",\"gameCard\":\"ProfilePage_gameCard__xuvKm\",\"win\":\"ProfilePage_win__ywIdB\",\"lose\":\"ProfilePage_lose__VoJT8\",\"waiting\":\"ProfilePage_waiting__6+o21\",\"ready\":\"ProfilePage_ready__jbGYu\",\"user\":\"ProfilePage_user__-XiU2\",\"gameId\":\"ProfilePage_gameId__-KLAl\"};","import React from \"react\";\r\nimport {Button, Modal, Tooltip, Typography} from \"antd\";\r\nimport styles from \"../ProfilePage.module.css\";\r\nimport {CopyOutlined} from \"@ant-design/icons\";\r\n\r\nconst {Text} = Typography;\r\n\r\n// Модульное окно с уведомлением о создании новой игры\r\nconst ModalCreateGame = ({messageApi,  createdGameId, onCreateNewGameModalClose, isCreateGameModalOpen}) => {\r\n\r\n\t// функция для создания всплывающего окна\r\n\tconst success = () => {\r\n\t\tmessageApi.open({\r\n\t\t\ttype: \"success\",\r\n\t\t\tcontent: \"Скопировано\",\r\n\t\t\tduration: 2\r\n\t\t});\r\n\t};\r\n\r\n\tconst onClickCopy = () => { // функция копирования по нажатию\r\n\t\tnavigator.clipboard.writeText(String(createdGameId))\r\n\t\t\t.then(() => success()); // отображение всплывающего окна\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\ttitle=\"Игра создана\"\r\n\t\t\topen={isCreateGameModalOpen}\r\n\t\t\tclosable={false}\r\n\t\t\tcentered\r\n\t\t\tonCancel={onCreateNewGameModalClose}\r\n\t\t\tfooter={[\r\n\t\t\t\t<Button type=\"primary\" onClick={onCreateNewGameModalClose} key=\"okButton\">OK</Button>\r\n\t\t\t]}\r\n\t\t>\r\n\t\t\t<div>\r\n\t\t\t\t<Text>Для начала игры ваш соперник должен нажать кнопку «Присоединиться» и ввести идентификатор игры:</Text><br/>\r\n\t\t\t\t<Text>id: </Text>\r\n\t\t\t\t<Tooltip title=\"Копировать\">\r\n\t\t\t\t\t<Text code onClick={onClickCopy} className={styles.copy}>{createdGameId}&nbsp;<CopyOutlined/></Text>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t</div>\r\n\t\t</Modal>\r\n\t);\r\n};\r\n\r\nexport default ModalCreateGame;","import React, {useEffect} from \"react\";\r\nimport {Button, Form, InputNumber, Modal, Typography} from \"antd\";\r\n\r\nconst {Text} = Typography;\r\n\r\n// Модульное окно для подключения к уже существующей игре\r\nconst ModalConnectToGame = ({messageApi, isConnectGameModalOpen, isConnectGameLoading, connectedGameId, connectGameError, setConnectToGameModalOpened, onConnectToGameModalFormSubmit}) => {\r\n\r\n\tconst [formConnectToGame] = Form.useForm(); // для работы с формой в модульном окне подключения к игре\r\n\r\n\tuseEffect(() => {\r\n\t\tif (connectedGameId) { // если появился идентификатор подключения к игре, значит удалось подсоединиться к игре, значит нужно перейти к игре\r\n\t\t\tsetConnectToGameModalOpened(false); // закрытие модульного окна\r\n\t\t\tmessageApi.open({ // отображение всплывающего уведомления об успехе подключения\r\n\t\t\t\ttype: \"success\",\r\n\t\t\t\tcontent: \"Игра добавлена в ваш список\",\r\n\t\t\t\tduration: 5\r\n\t\t\t});\r\n\t\t}\r\n\t}, [connectedGameId]);\r\n\r\n\t// функция обработчик нажатия кнопки \"Отмена\" в модульном окне подключения к игре\r\n\tconst onConnectGameModalCancelButtonClick = () => {\r\n\t\tformConnectToGame.resetFields(); // очистка формы\r\n\t\tsetConnectToGameModalOpened(false); // закрытие модульного окна\r\n\t};\r\n\r\n\t// функция обработчик отправки формы в модульном окне подключения к игре\r\n\t// функция вызывается только если форма прошла валидацию\r\n\tconst onConnectToGameFormSubmitted = () => {\r\n\t\tonConnectToGameModalFormSubmit(formConnectToGame.getFieldValue(\"gameId\"));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\ttitle=\"Присоединиться к игре\"\r\n\t\t\topen={isConnectGameModalOpen}\r\n\t\t\tcentered\r\n\t\t\tonCancel={onConnectGameModalCancelButtonClick}\r\n\t\t\tfooter={[\r\n\t\t\t\t<Button\r\n\t\t\t\t\ttype=\"default\"\r\n\t\t\t\t\tonClick={onConnectGameModalCancelButtonClick}\r\n\t\t\t\t\tkey=\"cancel\">Отмена\r\n\t\t\t\t</Button>,\r\n\t\t\t\t<Button\r\n\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\tonClick={() => formConnectToGame.submit()}\r\n\t\t\t\t\tloading={isConnectGameLoading}\r\n\t\t\t\t\tkey=\"ok\">OK\r\n\t\t\t\t</Button>\r\n\t\t\t]}\r\n\t\t>\r\n\t\t\t<div>\r\n\t\t\t\t<Text>Для подключения к игре введите её идентификатор</Text><br/>\r\n\t\t\t\t<Form\r\n\t\t\t\t\tonFinish={onConnectToGameFormSubmitted}\r\n\t\t\t\t\tform={formConnectToGame}\r\n\t\t\t\t\trequiredMark={false}>\r\n\t\t\t\t\t<Form.Item\r\n\t\t\t\t\t\tlabel=\"id\"\r\n\t\t\t\t\t\tname=\"gameId\"\r\n\t\t\t\t\t\tvalidateStatus={connectGameError ? \"error\" : \"success\"}\r\n\t\t\t\t\t\thelp={connectGameError}\r\n\t\t\t\t\t\trules={[{\r\n\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\tmessage: \"Введите идентификатор игры\",\r\n\t\t\t\t\t\t}]}>\r\n\t\t\t\t\t\t<InputNumber size=\"small\" min={1}/>\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t</Form>\r\n\t\t\t</div>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default ModalConnectToGame;","import {GAME_STATUS_INIT, GAME_STATUS_OPPONENT_TURN, GAME_STATUS_OPPONENT_WIN, GAME_STATUS_YOU_WIN, GAME_STATUS_YOUR_TURN} from \"../../../Strings\";\r\nimport {ClockCircleOutlined, MehOutlined, PlusSquareOutlined, RightSquareOutlined, TrophyOutlined, UsergroupAddOutlined} from \"@ant-design/icons\";\r\nimport styles from \"../ProfilePage.module.css\";\r\nimport {Button, Card, message, Tooltip} from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport React from \"react\";\r\nimport ModalCreateGame from \"./ModalCreateGame\";\r\nimport ModalConnectToGame from \"./ModalConnectToGame\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport LoaderFullSpace from \"../../Common/LoaderFullSpace/LoaderFullSpace\";\r\n\r\n// карточка с игрой\r\n// game = {\r\n// \tid: 6,\r\n// \tfirstUserColor: \"WHITE\",\r\n// \tfirstUserId: 4,\r\n// \tsecondUserId: 1,\r\n// \tsecondUserLogin: \"login1\",\r\n// \tfirstUserLogin: \"login2\",\r\n// \tsecondUserColor: \"BLACK\",\r\n// \tstatus: \"IN_PROCESS\"\r\n// }\r\nconst GameNode = ({game}) => {\r\n\r\n\tconst navigate = useNavigate(); // хук для перехода между страницами\r\n\r\n\tlet gameStatus = game.status; // статус игры\r\n\tlet icon; // иконка\r\n\tlet background; // стиль фона для карточки\r\n\r\n\tswitch (gameStatus) {\r\n\t\tcase GAME_STATUS_INIT:\r\n\t\t\tgameStatus = \"Ожидаем соперника\";\r\n\t\t\ticon = <ClockCircleOutlined/>;\r\n\t\t\tbackground = styles.waiting;\r\n\t\t\tbreak;\r\n\t\tcase GAME_STATUS_YOUR_TURN:\r\n\t\t\tgameStatus = \"Ваш ход\";\r\n\t\t\ticon = <RightSquareOutlined/>;\r\n\t\t\tbackground = styles.ready;\r\n\t\t\tbreak;\r\n\t\tcase GAME_STATUS_OPPONENT_TURN:\r\n\t\t\tgameStatus = \"Ход соперника\";\r\n\t\t\ticon = <ClockCircleOutlined/>;\r\n\t\t\tbackground = styles.waiting;\r\n\t\t\tbreak;\r\n\t\tcase GAME_STATUS_YOU_WIN:\r\n\t\t\tgameStatus = \"Вы победили\";\r\n\t\t\ticon = <TrophyOutlined/>;\r\n\t\t\tbackground = styles.win;\r\n\t\t\tbreak;\r\n\t\tcase GAME_STATUS_OPPONENT_WIN:\r\n\t\t\tgameStatus = \"Вы проиграли\";\r\n\t\t\ticon = <MehOutlined/>;\r\n\t\t\tbackground = styles.lose;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tgameStatus = \"Какая-то ошибка\";\r\n\t\t\ticon = <MehOutlined/>;\r\n\t\t\tbackground = styles.lose;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tconst onGameCardClick = () => {\r\n\t\tif (game.status !== GAME_STATUS_INIT) // переход на страничку игры, если она уже идёт\r\n\t\t\tnavigate(\"/game/\" + game.id);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Card className={styles.gameCard + \" \" + background} onClick={onGameCardClick}>\r\n\t\t\t{icon}&nbsp;&nbsp;\r\n\t\t\t{\r\n\t\t\t\tgame.opponentId &&\r\n\t\t\t\t<Tooltip title={\"id: \" + game.opponentId}>\r\n\t\t\t\t\t<span className={styles.user}>{game.opponentLogin}</span>&nbsp;\r\n\t\t\t\t</Tooltip>\r\n\t\t\t}\r\n\t\t\t<span>{gameStatus}</span>&nbsp;\r\n\t\t\t<span className={styles.gameId}>(id: {game.id})</span>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nconst GamesBlock = ({games, isGamesListLoading, isCreateGameLoading, onCreateNewGameButtonClick, setConnectToGameModalOpened, createGameModalProps, connectToGameModalProps}) => {\r\n\r\n\tconst [messageApi, contextHolder] = message.useMessage(); // для отображения всплывающего сообщения\r\n\r\n\tlet gamesArr = [];\r\n\tif (!isGamesListLoading && games) {\r\n\t\tgamesArr = games.map(game => <GameNode key={game.id} game={game}/>);\r\n\t}\r\n\tif (Array.isArray(games)) {\r\n\t\tif (games.length === 0)\r\n\t\t\tgamesArr = <p className={styles.gameId}>Вы ещё не сыграли ни одной партии.<br/>С помощью кнопок выше Вы можете создать свою первую партию или подключиться к партии, созданной вашим другом</p>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{contextHolder}\r\n\t\t\t<div className={styles.gamesBlockHeader}>\r\n\t\t\t\t<Title level={2}>Список партий</Title>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tloading={isCreateGameLoading}\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\ticon={<PlusSquareOutlined/>}\r\n\t\t\t\t\t\tonClick={onCreateNewGameButtonClick}>Создать\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\ticon={<UsergroupAddOutlined/>}\r\n\t\t\t\t\t\tonClick={() => setConnectToGameModalOpened(true)}>Присоединиться\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{\r\n\t\t\t\tisGamesListLoading\r\n\t\t\t\t\t? <div className={styles.loader}><LoaderFullSpace message=\"Подгружаем данные\" size=\"medium\"/></div>\r\n\t\t\t\t\t: <div className={styles.gameCardBlock}>{gamesArr}</div>\r\n\t\t\t}\r\n\t\t\t<ModalCreateGame messageApi={messageApi} {...createGameModalProps}/>\r\n\t\t\t<ModalConnectToGame messageApi={messageApi} {...connectToGameModalProps}/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GamesBlock;","import React from \"react\";\r\nimport TemplatePageWithMenu from \"../TemplatePageWithMenu/TemplatePageWithMenu\";\r\nimport {Avatar} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport styles from \"./ProfilePage.module.css\"\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport GamesBlock from \"./GamesBlock/GamesBlock\";\r\n\r\nconst UserPhotoAndLoginBlock = ({login}) => {\r\n\treturn (\r\n\t\t<div className={styles.userPhotoAndLoginBlock}>\r\n\t\t\t<Avatar\r\n\t\t\t\tsize={100}\r\n\t\t\t\ticon={<UserOutlined/>}\r\n\t\t\t/>\r\n\t\t\t<div className={styles.nameBlock}>\r\n\t\t\t\t<Title level={2}>{login}</Title>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst ProfilePage = ({login, gamesBlockProps}) => {\r\n\treturn (\r\n\t\t<TemplatePageWithMenu>\r\n\t\t\t<UserPhotoAndLoginBlock login={login}/>\r\n\t\t\t<GamesBlock {...gamesBlockProps}/>\r\n\t\t</TemplatePageWithMenu>\r\n\t);\r\n}\r\n\r\nexport default ProfilePage;","import React, {useEffect} from \"react\";\r\nimport withAuthRedirect from \"../HOC/withAuthRedirect\";\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n\tselectConnectedGameId,\r\n\tselectConnectGameError,\r\n\tselectCreatedGameId,\r\n\tselectGames,\r\n\tselectIsConnectGameLoading,\r\n\tselectIsConnectGameModalOpen,\r\n\tselectIsCreateGameLoading,\r\n\tselectIsCreateGameModalOpen,\r\n\tselectIsGamesListLoading,\r\n\tsetIsConnectGameModalOpen,\r\n\tsetIsCreateGameModalOpen,\r\n\ttryConnectToGameAsync,\r\n\ttryCreateNewGameAsync,\r\n\ttryGetGamesListAsync\r\n} from \"../../Redux/ProfileReducer\";\r\nimport {selectLogin, selectUserId} from \"../../Redux/AuthReducer\";\r\nimport {reinterpretGameData} from \"../../Utils/Checkers\";\r\n\r\nconst ProfilePageContainer = () => {\r\n\r\n\tconst login = useSelector(selectLogin);\r\n\tconst userId = useSelector(selectUserId);\r\n\tlet games = useSelector(selectGames);\r\n\tconst isGamesListLoading = useSelector(selectIsGamesListLoading);\r\n\tconst isCreateGameLoading = useSelector(selectIsCreateGameLoading);\r\n\tconst createdGameId = useSelector(selectCreatedGameId);\r\n\tconst isCreateGameModalOpen = useSelector(selectIsCreateGameModalOpen);\r\n\tconst isConnectGameModalOpen = useSelector(selectIsConnectGameModalOpen);\r\n\tconst isConnectGameLoading = useSelector(selectIsConnectGameLoading);\r\n\tconst connectedGameId = useSelector(selectConnectedGameId);\r\n\tconst connectGameError = useSelector(selectConnectGameError);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(()=> { // обработчик на componentWillMount\r\n\t\tif (!isGamesListLoading) { // когда пользователь заходит в профиль, всегда надо подгружать свежие игры\r\n\t\t\tdispatch(tryGetGamesListAsync());\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (games === null && !isGamesListLoading) {\r\n\t\t\tdispatch(tryGetGamesListAsync());\r\n\t\t}\r\n\t});\r\n\r\n\tif (games) {\r\n\t\tgames = games.map(game => reinterpretGameData(game, userId));\r\n\t}\r\n\r\n\t// нажатие по кнопке \"Создать\" для создания новой игры\r\n\tconst onCreateNewGameButtonClick = () => {\r\n\t\tdispatch(tryCreateNewGameAsync());\r\n\t};\r\n\r\n\t// нажатие на ок для закрытия модульного окна с сообщением о созданной игре\r\n\tconst onCreateNewGameModalClose = () => {\r\n\t\tdispatch(setIsCreateGameModalOpen(false));\r\n\t\tdispatch(tryGetGamesListAsync());\r\n\t};\r\n\r\n\t// установка значения открытия модульного окна \"Присоединиться к игре\"\r\n\tconst setConnectToGameModalOpened = (open) => {\r\n\t\tdispatch(setIsConnectGameModalOpen(open));\r\n\t\tif (!open) { // если окно закрыто, значит надо обновить список игр\r\n\t\t\tdispatch(tryGetGamesListAsync());\r\n\t\t}\r\n\t};\r\n\r\n\t// нажатие Ок в модульном окне подключения к игре\r\n\tconst onConnectToGameModalFormSubmit = (gameId) => {\r\n\t\tdispatch(tryConnectToGameAsync({gameId, userId}));\r\n\t}\r\n\r\n\t// упаковка props для более удобной передачи между компонентами\r\n\tconst gamesBlockProps = {\r\n\t\tgames,\r\n\t\tisGamesListLoading,\r\n\t\tisCreateGameLoading,\r\n\t\tonCreateNewGameButtonClick,\r\n\t\tsetConnectToGameModalOpened,\r\n\t\tcreateGameModalProps: {\r\n\t\t\tcreatedGameId,\r\n\t\t\tonCreateNewGameModalClose,\r\n\t\t\tisCreateGameModalOpen\r\n\t\t},\r\n\t\tconnectToGameModalProps: {\r\n\t\t\tisConnectGameModalOpen,\r\n\t\t\tisConnectGameLoading,\r\n\t\t\tconnectedGameId,\r\n\t\t\tconnectGameError,\r\n\t\t\tsetConnectToGameModalOpened,\r\n\t\t\tonConnectToGameModalFormSubmit\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ProfilePage login={login} gamesBlockProps={gamesBlockProps}/>\r\n\t);\r\n}\r\n\r\nexport default withAuthRedirect(ProfilePageContainer);","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TemplatePageWithMenu_wrapper__ixbQB\",\"sidebar\":\"TemplatePageWithMenu_sidebar__yXlI7\",\"content\":\"TemplatePageWithMenu_content__Mc3IK\"};","import React, {useEffect} from \"react\";\r\nimport {AppstoreOutlined, ClockCircleOutlined, PlaySquareOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {Menu} from \"antd\";\r\nimport styles from \"./TemplatePageWithMenu.module.css\"\r\nimport {useLocation, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectOpenedMenuBlocks, setOpenedMenuBlocks} from \"../../Redux/MenuReducer\";\r\nimport {selectGames, selectIsGamesListLoading, tryGetGamesListAsync} from \"../../Redux/ProfileReducer\";\r\nimport {reinterpretGameData} from \"../../Utils/Checkers\";\r\nimport {selectUserId} from \"../../Redux/AuthReducer\";\r\nimport {GAME_STATUS_IN_PROCESS, GAME_STATUS_OPPONENT_TURN} from \"../../Strings\";\r\n\r\nconst TemplatePageWithMenu = ({children}) => {\r\n\tconst navigate = useNavigate(); // хук для перехода на другие страницы\r\n\tconst location = useLocation().pathname; // получение url странички; pathname возвращает часть пути, используемую приложением\r\n\r\n\tconst userId = useSelector(selectUserId);\r\n\tlet games = useSelector(selectGames); // получение списка последних игр\r\n\tconst isGamesListLoading = useSelector(selectIsGamesListLoading);\r\n\tconst openedMenuBlocks = useSelector(selectOpenedMenuBlocks); // получение списка раскрытых блоков меню\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (games === null && !isGamesListLoading) {\r\n\t\t\tdispatch(tryGetGamesListAsync());\r\n\t\t}\r\n\t});\r\n\r\n\t// если есть игры в списке пользователя, то отобразить 5 последних в меню\r\n\tif (games) {\r\n\t\tlet counter = 0;\r\n\t\tgames = games.filter(game => { // оставляем только 5 активных игр\r\n\t\t\tif ((game.status === GAME_STATUS_IN_PROCESS) && (counter++ <= 5))\r\n\t\t\t\treturn game;\r\n\t\t\telse return false;\r\n\t\t});\r\n\t\tgames = games.map(game => reinterpretGameData(game, userId)); // добавляем необходимые данные\r\n\t\tgames = games.map(game => ({ // оформляем в виде массива children для меню\r\n\t\t\tlabel: game.opponentLogin,\r\n\t\t\ticon: (game.status === GAME_STATUS_OPPONENT_TURN ? <ClockCircleOutlined/> : <PlaySquareOutlined/>),\r\n\t\t\tkey: \"/game/\" + game.id\r\n\t\t}));\r\n\t}\r\n\r\n\t// элементы меню\r\n\t// в качестве key используется path для перехода\r\n\tconst menuItems = [\r\n\t\t{label: \"Профиль\", icon: <UserOutlined/>, key: \"/profile\"},\r\n\t\t{\r\n\t\t\tlabel: \"Последние игры\",\r\n\t\t\ticon: <AppstoreOutlined/>,\r\n\t\t\tkey: \"games\",\r\n\t\t\tchildren: games !== null && games.length > 0\r\n\t\t\t\t? games\r\n\t\t\t\t: [{label: \"Нет активных игр\", key: \"/noGames\", type: \"group\"}]\r\n\t\t},\r\n\t];\r\n\r\n\t// обработчик нажатий на элемент меню\r\n\tconst onMenuSelect = (props) => {\r\n\t\tnavigate(props.key); // переход на страничку\r\n\t}\r\n\r\n\t// обработчик раскрытия и закрытия элементов меню\r\n\tconst onMenuBlockClick = (props) => {\r\n\t\tdispatch(setOpenedMenuBlocks(props));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<div className={styles.sidebar}>\r\n\t\t\t\t<Menu\r\n\t\t\t\t\tmode=\"inline\"\r\n\t\t\t\t\tdefaultSelectedKeys={[location]}\r\n\t\t\t\t\tdefaultOpenKeys={openedMenuBlocks}\r\n\t\t\t\t\titems={menuItems}\r\n\t\t\t\t\tonSelect={onMenuSelect}\r\n\t\t\t\t\tonOpenChange={onMenuBlockClick}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<section className={styles.content}>\r\n\t\t\t\t{children}\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default TemplatePageWithMenu;"],"names":["Component","props","userId","useSelector","selectUserId","login","selectLogin","token","selectToken","dispatch","useDispatch","React","tryGetLoginUserDataAsync","getTokenFromCookie","setLogoutData","to","Text","Typography","messageApi","createdGameId","onCreateNewGameModalClose","isCreateGameModalOpen","title","open","closable","centered","onCancel","footer","type","onClick","code","navigator","clipboard","writeText","String","then","content","duration","className","styles","CopyOutlined","isConnectGameModalOpen","isConnectGameLoading","connectedGameId","connectGameError","setConnectToGameModalOpened","onConnectToGameModalFormSubmit","Form","formConnectToGame","useEffect","onConnectGameModalCancelButtonClick","resetFields","submit","loading","onFinish","getFieldValue","form","requiredMark","label","name","validateStatus","help","rules","required","message","size","min","GameNode","icon","background","game","navigate","useNavigate","gameStatus","status","GAME_STATUS_INIT","ClockCircleOutlined","GAME_STATUS_YOUR_TURN","RightSquareOutlined","GAME_STATUS_OPPONENT_TURN","GAME_STATUS_YOU_WIN","TrophyOutlined","GAME_STATUS_OPPONENT_WIN","MehOutlined","id","opponentId","opponentLogin","games","isGamesListLoading","isCreateGameLoading","onCreateNewGameButtonClick","createGameModalProps","connectToGameModalProps","contextHolder","gamesArr","map","Array","isArray","length","Title","level","PlusSquareOutlined","UsergroupAddOutlined","LoaderFullSpace","UserPhotoAndLoginBlock","UserOutlined","gamesBlockProps","TemplatePageWithMenu","withAuthRedirect","selectGames","selectIsGamesListLoading","selectIsCreateGameLoading","selectCreatedGameId","selectIsCreateGameModalOpen","selectIsConnectGameModalOpen","selectIsConnectGameLoading","selectConnectedGameId","selectConnectGameError","tryGetGamesListAsync","reinterpretGameData","setIsConnectGameModalOpen","tryCreateNewGameAsync","setIsCreateGameModalOpen","gameId","tryConnectToGameAsync","children","location","useLocation","pathname","openedMenuBlocks","selectOpenedMenuBlocks","counter","filter","GAME_STATUS_IN_PROCESS","PlaySquareOutlined","key","menuItems","AppstoreOutlined","mode","defaultSelectedKeys","defaultOpenKeys","items","onSelect","onOpenChange","setOpenedMenuBlocks"],"sourceRoot":""}